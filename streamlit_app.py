"""
Dashboard Interativo para An√°lise de Ideias de Aplicativos
Desenvolvido para visualizar dados de pesquisa sobre aplicativos que alunos gostariam de desenvolver.
"""

import streamlit as st
import pandas as pd
from pathlib import Path

# Importar m√≥dulos personalizados
from utils.data_processor import DataProcessor
from utils.colors import AccessibleColors
from components.visualizations import AppVisualizationManager
from components.filters import FilterManager


def configure_page():
    """Configura a p√°gina do Streamlit."""
    st.set_page_config(
        page_title="Dashboard de An√°lise de Apps",
        page_icon="üì±",
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items={
            'Get Help': None,
            'Report a bug': None,
            'About': "Dashboard para an√°lise de ideias de aplicativos dos alunos"
        }
    )


def load_custom_css():
    """Carrega CSS personalizado para acessibilidade."""
    colors = AccessibleColors()
    st.markdown(colors.get_streamlit_css(), unsafe_allow_html=True)


def display_header():
    """Exibe cabe√ßalho do dashboard."""
    st.title("üì± Dashboard de An√°lise de Ideias de Aplicativos")
    st.markdown("""
    <div style="background-color: #f8f9fa; padding: 1rem; border-radius: 0.5rem; border-left: 4px solid #1f4e79; margin-bottom: 2rem;">
        <p style="margin: 0; color: #495057;">
            <strong>Objetivo:</strong> Analisar as ideias de aplicativos que os alunos gostariam de desenvolver, 
            identificando recursos t√©cnicos necess√°rios, complexidade e implica√ß√µes √©ticas/legais.
        </p>
    </div>
    """, unsafe_allow_html=True)


def display_overview_tab(data_processor, viz_manager, df_filtered):
    """Exibe aba de vis√£o geral."""
    st.header("üìä Vis√£o Geral dos Projetos")
    
    # M√©tricas principais
    viz_manager.display_metrics_cards(data_processor)
    
    # Cards de categorias (top 6)
    st.subheader("üè∑Ô∏è Categorias sugeridas")
    viz_manager.display_category_summary_cards(data_processor)
    
    st.markdown("---")
    
    # Layout em colunas para gr√°ficos principais
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de complexidade
        complexity_data = df_filtered['Complexidade'].value_counts()
        _display_complexity_chart(viz_manager, complexity_data)
    
    with col2:
        # Gr√°fico de recursos RN
        _display_features_chart(viz_manager, df_filtered)


def _display_complexity_chart(viz_manager, complexity_data):
    """Exibe gr√°fico de complexidade."""
    if not complexity_data.empty:
        fig_complexity = viz_manager.create_complexity_pie_chart(complexity_data)
        st.plotly_chart(fig_complexity, use_container_width=True)
    else:
        st.info("Nenhum dado de complexidade dispon√≠vel com os filtros atuais.")


def _display_features_chart(viz_manager, df_filtered):
    """Exibe gr√°fico de recursos RN."""
    # Criar processador tempor√°rio com dados filtrados
    processor_filtered = DataProcessor("ideias_apps_viabilidade.csv")
    processor_filtered.df = df_filtered
    features_data = processor_filtered.get_rn_features_usage()
    
    palette = st.selectbox(
        "Paleta do gr√°fico de recursos:",
        options=["Viridis", "Cividis", "Plasma", "Inferno", "Turbo", "Greys"],
        index=0,
        help="Escolha uma paleta acess√≠vel para este gr√°fico"
    )

    if any(features_data.values()):
        fig_features = viz_manager.create_rn_features_bar_chart(features_data, palette=palette)
        st.plotly_chart(fig_features, use_container_width=True)
    else:
        st.info("Nenhum recurso React Native identificado com os filtros atuais.")


def display_categories_tab(data_processor, viz_manager, df_filtered):
    """Exibe aba de an√°lise por categorias."""
    st.header("üè∑Ô∏è An√°lise por Categorias")
    
    # Processar categorias com dados filtrados
    processor_filtered = DataProcessor("ideias_apps_viabilidade.csv")
    processor_filtered.df = df_filtered
    categories_data = processor_filtered.get_categories_analysis()
    
    # Treemap de categorias
    fig_treemap = viz_manager.create_categories_treemap(categories_data)
    st.plotly_chart(fig_treemap, use_container_width=True)
    
    st.markdown("---")
    
    # Detalhes por categoria
    st.subheader("üìã Detalhes por Categoria")
    
    for category, apps in categories_data.items():
        if apps:
            with st.expander(f"{category} ({len(apps)} projetos)"):
                for i, app in enumerate(apps, 1):
                    st.write(f"{i}. {app}")


def display_technical_tab(data_processor, viz_manager, df_filtered):
    """Exibe aba de an√°lise t√©cnica."""
    st.header("‚öôÔ∏è An√°lise T√©cnica")
    
    # Criar processador com dados filtrados
    processor_filtered = DataProcessor("ideias_apps_viabilidade.csv")
    processor_filtered.df = df_filtered
    
    # Heatmap de recursos por categoria
    st.subheader("üî• Recursos Necess√°rios por Categoria")
    # Seletor de paleta acess√≠vel (todas s√£o dalt√¥nico-friendly)
    palette = st.selectbox(
        "Paleta do mapa de calor:",
        options=["Viridis", "Cividis", "Plasma", "Inferno", "Turbo", "Greys"],
        index=0,
        help="Escolha uma paleta com alto contraste e acess√≠vel"
    )
    fig_heatmap = viz_manager.create_category_resources_heatmap(processor_filtered, palette=palette)
    st.plotly_chart(fig_heatmap, use_container_width=True)
    
    st.markdown("---")
    
    # Gr√°fico de complexidade vs recursos
    st.subheader("üìä Complexidade por N√∫mero de Recursos")
    fig_complexity = viz_manager.create_complexity_vs_resources_chart(processor_filtered)
    st.plotly_chart(fig_complexity, use_container_width=True)
    
    st.markdown("---")
    
    # Resumo t√©cnico
    st.subheader("üìã Resumo T√©cnico")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Recursos mais utilizados:**")
        features_data = processor_filtered.get_rn_features_usage()
        sorted_features = sorted(features_data.items(), key=lambda x: x[1], reverse=True)
        for feature, count in sorted_features[:3]:
            percentage = (count / len(df_filtered)) * 100 if len(df_filtered) > 0 else 0
            st.write(f"‚Ä¢ {feature}: {count} projetos ({percentage:.1f}%)")
    
    with col2:
        st.markdown("**Distribui√ß√£o de complexidade:**")
        complexity_dist = df_filtered['Complexidade'].value_counts()
        for complexity, count in complexity_dist.items():
            percentage = (count / len(df_filtered)) * 100 if len(df_filtered) > 0 else 0
            st.write(f"‚Ä¢ {complexity}: {count} projetos ({percentage:.1f}%)")


def display_ethics_tab(data_processor, viz_manager, df_filtered):
    """Exibe aba de an√°lise √©tica e legal."""
    st.header("‚öñÔ∏è An√°lise √âtica e Legal")
    
    # Processar alertas com dados filtrados
    processor_filtered = DataProcessor("ideias_apps_viabilidade.csv")
    processor_filtered.df = df_filtered
    alerts_data = processor_filtered.get_ethical_alerts_count()
    
    # Gr√°fico de alertas √©ticos com seletor de paleta
    palette_alerts = st.selectbox(
        "Paleta do gr√°fico de alertas:",
        options=["Viridis", "Cividis", "Plasma", "Inferno", "Turbo", "Greys"],
        index=0,
        help="Escolha uma paleta acess√≠vel para este gr√°fico"
    )
    fig_alerts = viz_manager.create_ethical_alerts_chart(alerts_data, palette=palette_alerts)
    st.plotly_chart(fig_alerts, use_container_width=True)
    
    st.markdown("---")
    
    # Detalhes dos alertas
    if alerts_data:
        st.subheader("‚ö†Ô∏è Detalhes dos Alertas Identificados")
        
        alert_descriptions = {
            'LGPD (dados pessoais/sens√≠veis)': {
                'description': 'Aplicativos que coletam e processam dados pessoais ou sens√≠veis dos usu√°rios.',
                'recommendations': [
                    'Implementar pol√≠tica de privacidade clara',
                    'Obter consentimento expl√≠cito dos usu√°rios',
                    'Implementar medidas de seguran√ßa para prote√ß√£o de dados',
                    'Permitir que usu√°rios acessem, corrijam e excluam seus dados'
                ]
            },
            'Modera√ß√£o de conte√∫do': {
                'description': 'Plataformas que permitem compartilhamento de conte√∫do gerado pelos usu√°rios.',
                'recommendations': [
                    'Implementar sistema de modera√ß√£o automatizada e manual',
                    'Definir diretrizes claras de comunidade',
                    'Criar mecanismos de den√∫ncia e bloqueio',
                    'Considerar impactos psicol√≥gicos do conte√∫do'
                ]
            },
            'Coleta de localiza√ß√£o': {
                'description': 'Aplicativos que acessam dados de localiza√ß√£o dos usu√°rios.',
                'recommendations': [
                    'Solicitar permiss√£o expl√≠cita para acesso √† localiza√ß√£o',
                    'Explicar claramente como os dados ser√£o utilizados',
                    'Implementar op√ß√µes de localiza√ß√£o aproximada quando poss√≠vel',
                    'Permitir desativa√ß√£o do rastreamento'
                ]
            },
            'Regula√ß√£o sa√∫de/telemedicina': {
                'description': 'Aplicativos relacionados √† sa√∫de mental ou f√≠sica dos usu√°rios.',
                'recommendations': [
                    'Consultar regulamenta√ß√µes do CFM e ANVISA',
                    'Incluir disclaimers sobre n√£o substitui√ß√£o de atendimento m√©dico',
                    'Considerar certifica√ß√µes de seguran√ßa m√©dica',
                    'Implementar mecanismos de emerg√™ncia'
                ]
            }
        }
        
        for alert, count in alerts_data.items():
            _display_alert_details(alert, count, alert_descriptions)
    else:
        st.success("‚úÖ Nenhum alerta √©tico ou legal identificado nos projetos filtrados.")


def _display_alert_details(alert, count, alert_descriptions):
    """Exibe detalhes de um alerta espec√≠fico."""
    if alert not in alert_descriptions:
        return
        
    with st.expander(f"‚ö†Ô∏è {alert} ({count} projetos)"):
        info = alert_descriptions[alert]
        st.write(f"**Descri√ß√£o:** {info['description']}")
        st.write("**Recomenda√ß√µes:**")
        for rec in info['recommendations']:
            st.write(f"‚Ä¢ {rec}")


def display_data_table_tab(df_filtered):
    """Exibe aba com tabela de dados."""
    st.header("üìã Dados Detalhados")
    
    if df_filtered.empty:
        st.warning("Nenhum projeto encontrado com os filtros selecionados.")
        return
    
    # Preparar dados para exibi√ß√£o
    display_df = df_filtered.copy()
    
    # Renomear colunas para melhor legibilidade
    column_mapping = {
        'id': 'ID',
        'ideia_resumo': 'Ideia do Aplicativo',
        'apps_semelhantes': 'Apps Semelhantes',
        'RN_camera': 'C√¢mera',
        'RN_maps': 'Mapas',
        'RN_notificacoes': 'Notifica√ß√µes',
        'RN_autenticacao': 'Autentica√ß√£o',
        'RN_pagamentos': 'Pagamentos',
        'Complexidade': 'Complexidade',
        'Alertas_etico_legais': 'Alertas √âticos/Legais'
    }
    
    display_df = display_df.rename(columns=column_mapping)
    
    # Selecionar colunas relevantes
    relevant_columns = [
        'ID', 'Ideia do Aplicativo', 'Apps Semelhantes', 
        'C√¢mera', 'Mapas', 'Notifica√ß√µes', 'Autentica√ß√£o', 'Pagamentos',
        'Complexidade', 'Alertas √âticos/Legais'
    ]
    
    display_df = display_df[relevant_columns]
    
    # Exibir tabela
    st.dataframe(
        display_df,
        use_container_width=True,
        height=400
    )
    
    # Op√ß√£o de download
    csv = display_df.to_csv(index=False)
    st.download_button(
        label="üì• Baixar dados filtrados (CSV)",
        data=csv,
        file_name="ideias_apps_filtradas.csv",
        mime="text/csv"
    )


def main():
    """Fun√ß√£o principal do dashboard."""
    configure_page()
    load_custom_css()
    display_header()
    
    # Carregar dados
    csv_path = "ideias_apps_viabilidade.csv"
    
    try:
        data_processor = DataProcessor(csv_path)
        
        if data_processor.df.empty:
            st.error("‚ùå N√£o foi poss√≠vel carregar os dados. Verifique se o arquivo CSV est√° presente.")
            return
        
        # Inicializar componentes
        viz_manager = AppVisualizationManager()
        filter_manager = FilterManager(data_processor)
        
        # Criar filtros na barra lateral
        filters = filter_manager.create_sidebar_filters()
        advanced_filters = filter_manager.get_advanced_filters()
        
        # Aplicar filtros
        df_filtered = filter_manager.apply_filters(filters)
        df_filtered = filter_manager.apply_advanced_filters(df_filtered, advanced_filters)
        
        # Exibir resumo dos filtros
        filter_manager.display_filter_summary(data_processor.df, df_filtered)
        
        # Criar abas do dashboard
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä Vis√£o Geral", 
            "üè∑Ô∏è Categorias", 
            "‚öôÔ∏è An√°lise T√©cnica", 
            "‚öñÔ∏è √âtica e Legal", 
            "üìã Dados"
        ])
        
        with tab1:
            display_overview_tab(data_processor, viz_manager, df_filtered)
        
        with tab2:
            display_categories_tab(data_processor, viz_manager, df_filtered)
        
        with tab3:
            display_technical_tab(data_processor, viz_manager, df_filtered)
        
        with tab4:
            display_ethics_tab(data_processor, viz_manager, df_filtered)
        
        with tab5:
            display_data_table_tab(df_filtered)
        
        # Rodap√©
        st.markdown("---")
        st.markdown(
            """
            <div style="text-align: center; color: #6c757d; font-size: 0.9em;">
                Dashboard desenvolvido com Cursor AI usando Streamlit + Python
            </div>
            """, 
            unsafe_allow_html=True
        )
        
    except Exception as e:
        st.error(f"‚ùå Erro ao inicializar o dashboard: {e}")
        st.info("Verifique se o arquivo 'ideias_apps_viabilidade.csv' est√° presente no diret√≥rio.")


if __name__ == "__main__":
    main()
